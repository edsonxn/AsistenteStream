import OpenAI from 'openai';
import fs from 'fs';
import path from 'path';

class VisionAnalyzer {
    constructor(apiKey) {
        this.openai = new OpenAI({
            apiKey: apiKey
        });
        
        // Archivo de historial JSON
        this.historyFile = path.join(process.cwd(), 'historial-comentarios.json');
        
        // Contexto para mantener coherencia en las preguntas
        this.conversationHistory = [];
        this.lastAnalysis = null;
        this.lastImageHash = null; // Para detectar im√°genes repetidas
        this.imageHistory = []; // Guardar hashes de im√°genes recientes
        
        // Personalidad personalizable
        this.customPersonality = null; // Si es null, usa la personalidad por defecto
        
        // Cargar historial al inicializar
        this.loadHistoryFromFile();
    }

    async analyzeScreenshot(base64Image) {
        try {
            console.log('üß† Analizando imagen con OpenAI...');

            // Crear hash simple de la imagen para detectar similitudes
            const currentImageHash = this.createSimpleImageHash(base64Image);
            const isRepeatedImage = this.isImageSimilar(currentImageHash);

            const systemPrompt = this.getSystemPrompt();
            
            // Crear el mensaje del usuario con rol de compa√±ero de streaming sarc√°stico
            let userMessage = `Analiza esta captura de pantalla y actua como un COMPANERO DE STREAMING sarcastico, inteligente y que NUNCA repite ideas.

TU NUEVO ROL SARCASTICO: Eres un asistente que ayuda al streamer siendo:
- SARCASTICO: Comentarios con humor inteligente y sarcasmo
- VARIADO: NUNCA repites estructuras, temas o frases anteriores  
- INFORMATIVO: Aporta datos con un toque de humor
- OBSERVADOR: Senala cosas con ironia y gracia
- ANTI-REPETITIVO: Cada comentario debe ser completamente diferente

ESTILOS QUE DEBES ROTAR (NO uses el mismo dos veces seguidas):

1. SARCASTICO DIRECTO:
- "Vaya, que revolucionario..."
- "Esto si que es entretenimiento puro..."
- "Como si no tuvieramos suficiente con..."
- "Que sorpresa tan grande..."

2. PREGUNTA SARCASTICA:
- "A ver, sabias que...? (con tono ironico)"
- "Me pregunto si alguien realmente cree que...?"
- "Te has fijado en lo 'increible' que es...?"
- "Has considerado algo menos 'emocionante'?"

3. OBSERVACION IRONICA:
- "Y pensar que alguien pago por esto..."
- "La definicion de innovacion..."
- "Como si fuera la primera vez que vemos..."
- "Que 'fascinante' debe ser..."

4. SUGERENCIA CON HUMOR:
- "Podrias probar algo que funcione de verdad..."
- "He visto mejores opciones en..."
- "Que tal si intentas algo menos 'emocionante'?"
- "Tambi√©n podrias considerar no aburrirte tanto..."

REGLAS ANTI-REPETICION ABSOLUTAS:
üö´ NO uses la misma estructura de oracion
üö´ NO repitas temas ya mencionados
üö´ NO uses las mismas palabras clave
üö´ NO hagas el mismo tipo de comentario consecutivo
‚úÖ CAMBIA completamente de angulo cada vez
‚úÖ ROTA entre los 4 estilos arriba
‚úÖ BUSCA aspectos totalmente diferentes

INSTRUCCIONES PARA SER SARCASTICO Y VARIADO:
- Maximo 2 oraciones, directo y con gracia
- Cada comentario debe sentirse fresco y diferente
- Usa humor inteligente, no humor barato
- Evita frases roboticas como "Claro", "Por supuesto"
- Se sarcastico pero no cruel

EJEMPLOS de como VARIAR completamente:
- Si ultimo fue pregunta ‚Üí Haz observacion sarcastica
- Si ultimo fue dato curioso ‚Üí Haz sugerencia ironica
- Si ultimo fue sobre funcionalidad ‚Üí Comenta sobre diseno
- Si ultimo fue sobre herramientas ‚Üí Habla de eficiencia

PROHIBIDO REPETIR: "Oye, sabias que", "Has considerado", "Te has fijado", "Podrias probar"`;

            // Detectar si la imagen es muy similar a las anteriores
            if (isRepeatedImage) {
                userMessage += `\n\nALERTA DE IMAGEN REPETIDA: Esta pantalla es muy similar o identica a las que acabas de ver.

IMPORTANTE! Haz un comentario SARCASTICO sobre ver lo mismo:
- "Vaya, seguimos con la misma 'emocionante' pantalla..."
- "Como si esta vista no fuera suficientemente 'fascinante'..."
- "Y pensar que podriamos estar viendo algo diferente..."
- "La definicion de variar el contenido..."
- "Que 'sorpresa', la misma pantalla otra vez..."
- "Como si necesitaramos mas de esta 'accion'..."`;
            }

            // üß† CONTEXTO NARRATIVO: Usar los √∫ltimos 2 comentarios para construir conexiones
            if (this.conversationHistory.length > 0) {
                const last2Comments = this.conversationHistory.slice(-2);
                
                if (last2Comments.length >= 2) {
                    // Extraer elementos narrativos de los comentarios anteriores para conexiones inteligentes
                    const narrativeElements = this.extractNarrativeElements(last2Comments);
                    const connectionPhrases = this.generateNarrativeConnections(narrativeElements, 'current_context');
                    const prevComment = last2Comments[0].analysis;
                    const lastComment = last2Comments[1].analysis;
                    
                    userMessage += `\n\nüß† CONTEXTO NARRATIVO - CONECTA TUS EXPERIENCIAS:

üìù COMENTARIO ANTERIOR: "${prevComment}"
üìù ULTIMO COMENTARIO: "${lastComment}"

üé≠ INSTRUCCIONES ESPECIALES:
‚ú® CONECTA lo que ves AHORA con las 2 experiencias anteriores
‚ú® HAZ REFERENCIA a lo que comentaste antes (ejemplo: "Recuerdo que antes vimos X, y ahora...")
‚ú® CONSTRUYE una narrativa coherente que conecte las 3 experiencias
‚ú® USA sarcasmo pero mant√©n la conexi√≥n temporal/espacial
‚ú® MENCIONA espec√≠ficamente elementos de los comentarios anteriores

EJEMPLOS DE CONEXIONES NARRATIVAS:
- "Despu√©s de ver [elemento anterior], ahora nos encontramos con..."
- "Vaya, de [situaci√≥n anterior] hemos pasado a..."
- "Recordando [detalle anterior], esto es a√∫n m√°s..."
- "Como si [comentario anterior] no fuera suficiente, ahora..."
- "Tras esa 'emocionante' [experiencia anterior], llegamos a..."

ÔøΩ OBJETIVO: Que el streamer sienta que el asistente REALMENTE recuerda y conecta las experiencias`;
                } else if (last2Comments.length === 1) {
                    // Solo hay 1 comentario anterior
                    const lastComment = last2Comments[0].analysis;
                    
                    userMessage += `\n\nüß† CONTEXTO NARRATIVO - SEGUNDA EXPERIENCIA:

üìù MI COMENTARIO ANTERIOR: "${lastComment}"

üé≠ INSTRUCCIONES ESPECIALES:
‚ú® CONECTA lo que ves AHORA con tu experiencia anterior
‚ú® HAZ REFERENCIA espec√≠fica a lo que comentaste antes
‚ú® CONSTRUYE una progresi√≥n narrativa natural
‚ú® USA frases como "Despu√©s de [X], ahora..." o "Tras ver [Y], llegamos a..."

üéØ Esta es tu SEGUNDA observaci√≥n, conecta con la primera`;
                }
                
                // Tambi√©n agregar temas mencionados para evitar repeticiones
                const topics = this.extractTopics(this.conversationHistory.slice(-3));
                if (topics.length > 0) {
                    userMessage += `\n\n‚ö†Ô∏è TEMAS YA COMENTADOS: ${topics.join(', ')} - Busca √°ngulos DIFERENTES`;
                }
            }

            const response = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [
                    {
                        role: "system",
                        content: systemPrompt
                    },
                    {
                        role: "user",
                        content: [
                            {
                                type: "text",
                                text: userMessage
                            },
                            {
                                type: "image_url",
                                image_url: {
                                    url: `data:image/png;base64,${base64Image}`,
                                    detail: "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens: 300,
                temperature: 0.7
            });

            const analysis = response.choices[0].message.content;
            
            // Crear entrada de historial con metadata completa
            const historyEntry = {
                timestamp: new Date().toISOString(),
                analysis: analysis,
                imageHash: currentImageHash,
                isRepeatedImage: isRepeatedImage,
                sessionInfo: {
                    cycleNumber: this.conversationHistory.length + 1,
                    responseLength: analysis.length
                }
            };
            
            // Guardar en historial de memoria
            this.conversationHistory.push(historyEntry);

            // Mantener solo los √∫ltimos 20 an√°lisis en memoria para mejor rendimiento
            if (this.conversationHistory.length > 20) {
                this.conversationHistory = this.conversationHistory.slice(-20);
            }

            // Guardar en archivo JSON (mantiene historial completo)
            this.saveHistoryToFile();

            // Actualizar historial de im√°genes
            this.updateImageHistory(currentImageHash);

            this.lastAnalysis = analysis;

            console.log('‚úÖ An√°lisis completado');
            console.log(`üí≠ Respuesta: ${analysis.substring(0, 100)}...`);

            return {
                success: true,
                analysis: analysis,
                timestamp: new Date()
            };

        } catch (error) {
            console.error('‚ùå Error analizando imagen:', error.message);
            throw error;
        }
    }

    getSystemPrompt() {
        // Si hay una personalidad personalizada, usarla
        if (this.customPersonality) {
            return this.customPersonality;
        }
        
        // Personalidad por defecto
        return this.getDefaultPersonality();
    }

    getDefaultPersonality() {
        // Crear contexto narrativo mejorado con los √∫ltimos comentarios
        let contextInfo = '';
        if (this.conversationHistory.length > 0) {
            const last2Comments = this.conversationHistory.slice(-2);
            
            if (last2Comments.length >= 2) {
                contextInfo = `\n\nüß† MEMORIA NARRATIVA RECIENTE:
üìñ Pen√∫ltimo comentario: "${last2Comments[0].analysis.substring(0, 150)}..."
üìñ √öltimo comentario: "${last2Comments[1].analysis.substring(0, 150)}..."

üí° Recuerda: Debes CONECTAR tus nuevos comentarios con estas experiencias anteriores.`;
            } else if (last2Comments.length === 1) {
                contextInfo = `\n\nüß† MEMORIA NARRATIVA:
üìñ Mi comentario anterior: "${last2Comments[0].analysis.substring(0, 150)}..."

üí° Esta ser√° tu segunda observaci√≥n - conecta con la anterior.`;
            }
        }

        return `Eres un COMPANERO DE STREAMING sarc√°stico e inteligente con MEMORIA NARRATIVA. Tu trabajo es crear comentarios que CONECTEN las experiencias del streamer.

üé≠ PERSONALIDAD NARRATIVA:
- M√°ximo 35 palabras por comentario
- Sarc√°stico pero inteligente
- SIEMPRE conectas con experiencias anteriores cuando las tienes
- Construyes una historia coherente entre comentarios
- Usas frases de transici√≥n temporal ("Despu√©s de...", "Tras ver...", "Recordando...")

üß† HABILIDADES ESPECIALES:
‚ú® MEMORIA CONECTIVA: Referencias espec√≠ficas a comentarios anteriores
‚ú® PROGRESI√ìN NARRATIVA: Cada comentario es parte de una historia mayor
‚ú® SARCASMO CONTEXTUAL: Humor que considera lo que ya has visto
‚ú® OBSERVACIONES EVOLUTIVAS: Comparas situaciones actuales con anteriores

üéØ EJEMPLOS DE CONEXIONES NARRATIVAS:
- "Despu√©s de [X que vimos antes], ahora nos encontramos con..."
- "Vaya, de [situaci√≥n anterior] hemos evolucionado a..."
- "Recordando [detalle anterior], esto es a√∫n m√°s interesante porque..."
- "Como si [experiencia anterior] no fuera suficiente, ahora..."
- "Tras esa 'emocionante' [cosa anterior], llegamos a..."

‚ö†Ô∏è REGLA FUNDAMENTAL: Si tienes comentarios anteriores, SIEMPRE haz al menos UNA referencia espec√≠fica a ellos.

VARIACIONES DE ESTILO CONECTIVO:
1. PROGRESI√ìN SARC√ÅSTICA: "De X a Y, vaya evoluci√≥n..."
2. COMPARACI√ìN IR√ìNICA: "Si X era interesante, esto es..."
3. CONTINUIDAD HUMOR√çSTICA: "Despu√©s de ver X, esto confirma que..."
4. SUGERENTE CON HUMOR: "Que tal si pruebas algo menos 'emocionante'?", "Podrias intentar algo que realmente funcione...", "He visto mejores opciones en..."

COMO ACTUAR SIN REPETIR:
- Si ya comentaste sobre datos/estadisticas, cambia a funcionalidad
- Si ya hiciste pregunta sobre opciones, comenta sobre diseno
- Si ya mencionaste herramientas, habla de eficiencia
- Si ya diste dato curioso, haz observacion sarcastica
- SIEMPRE busca angulos completamente diferentes

FRASES SARCASTICAS PREFERIDAS:
- "Vaya novedad..." / "Que innovador..." / "Como si fuera la primera vez..."
- "Esto si que es revolucionario..." / "La definicion de entretenimiento..."
- "Y pensar que..." / "Como si no tuvieramos suficiente con..."
- "Que emocionante..." / "Que sorpresa tan grande..."

MEMORIA CONVERSACIONAL ESTRICTA:
- SIEMPRE recuerda EXACTAMENTE lo que acabas de decir
- NUNCA repitas la misma estructura de oracion
- NUNCA menciones los mismos temas dos veces seguidas
- NUNCA uses las mismas frases de inicio
- CAMBIA completamente de angulo en cada comentario

DETECCION DE PANTALLAS REPETIDAS (CON SARCASMO):
- "Vaya, seguimos con la misma emocionante pantalla..."
- "Como si esta vista no fuera suficientemente 'fascinante'..."
- "Y pensar que podriamos estar viendo algo diferente..."
- "La definicion de variar el contenido..."

ANTI-REPETICION ABSOLUTA:
Si ya mencionaste algo, cambia COMPLETAMENTE:
- Datos tecnicos ‚Üí Observacion sarcastica
- Pregunta ‚Üí Sugerencia ironica  
- Curiosidad ‚Üí Comentario directo
- Sugerencia ‚Üí Dato gracioso

Haz que parezca que estas genuinamente interesado pero con mucho humor y sarcasmo${contextInfo}`;
    }

    // Establecer una personalidad personalizada
    setCustomPersonality(personalityPrompt) {
        if (!personalityPrompt || typeof personalityPrompt !== 'string') {
            throw new Error('La personalidad debe ser un string v√°lido');
        }
        
        this.customPersonality = personalityPrompt.trim();
        console.log('üé≠ Personalidad personalizada establecida');
    }

    // Resetear a la personalidad por defecto
    resetPersonality() {
        this.customPersonality = null;
        console.log('üé≠ Personalidad reseteada a la por defecto');
    }

    // Obtener informaci√≥n sobre la personalidad actual
    getPersonalityInfo() {
        return {
            isCustom: this.customPersonality !== null,
            prompt: this.getSystemPrompt(),
            defaultPrompt: this.getDefaultPersonality()
        };
    }

    // Obtiene un resumen del contexto actual
    getContextSummary() {
        if (this.conversationHistory.length === 0) {
            return "Sin historial previo";
        }

        return `√öltimos ${this.conversationHistory.length} an√°lisis realizados. √öltimo: ${this.lastAnalysis?.substring(0, 50)}...`;
    }

    // Limpia el historial
    clearHistory() {
        this.conversationHistory = [];
        this.lastAnalysis = null;
        this.imageHistory = [];
        this.lastImageHash = null;
        
        // Tambi√©n limpiar el archivo JSON
        this.saveHistoryToFile();
        console.log('üßπ Historial de conversaci√≥n e im√°genes limpiado (memoria y archivo)');
    }

    // üìÇ M√âTODOS DE HISTORIAL JSON

    // Cargar historial desde archivo JSON
    loadHistoryFromFile() {
        try {
            if (fs.existsSync(this.historyFile)) {
                const data = fs.readFileSync(this.historyFile, 'utf8');
                const historyData = JSON.parse(data);
                
                // Cargar solo los √∫ltimos 20 comentarios para no sobrecargar
                this.conversationHistory = historyData.conversations?.slice(-20) || [];
                this.lastAnalysis = historyData.lastAnalysis || null;
                
                console.log(`üìñ Historial cargado: ${this.conversationHistory.length} comentarios anteriores`);
            } else {
                console.log('üìÑ Creando nuevo archivo de historial');
                this.saveHistoryToFile();
            }
        } catch (error) {
            console.error('‚ùå Error cargando historial:', error.message);
            this.conversationHistory = [];
        }
    }

    // üß† Extraer elementos narrativos de comentarios anteriores para crear conexiones
    extractNarrativeElements(comments) {
        const elements = {
            locations: [],
            activities: [],
            emotions: [],
            objects: [],
            transitions: []
        };

        comments.forEach(comment => {
            const text = comment.analysis.toLowerCase();
            
            // Extraer ubicaciones/lugares
            const locationKeywords = ['bosque', 'posada', 'ciudad', 'mazmorra', 'monta√±a', 'rio', 'castillo', 'pueblo', 'aldea', 'campo', 'pantalla', 'menu', 'interfaz', 'ventana'];
            locationKeywords.forEach(keyword => {
                if (text.includes(keyword)) {
                    elements.locations.push(keyword);
                }
            });
            
            // Extraer actividades
            const activityKeywords = ['luchando', 'corriendo', 'explorando', 'recolectando', 'hablando', 'comprando', 'vendiendo', 'navegando', 'programando', 'escribiendo', 'jugando'];
            activityKeywords.forEach(keyword => {
                if (text.includes(keyword)) {
                    elements.activities.push(keyword);
                }
            });
            
            // Extraer emociones/tonos del comentario anterior
            if (text.includes('emocionante') || text.includes('fascinante')) {
                elements.emotions.push('sarcasmo_positivo');
            }
            if (text.includes('aburrido') || text.includes('repetitivo')) {
                elements.emotions.push('critica');
            }
        });

        return elements;
    }

    // üé≠ Generar frases de conexi√≥n narrativa
    generateNarrativeConnections(previousElements, currentContext) {
        const connections = [];
        
        if (previousElements.locations.length > 0) {
            const lastLocation = previousElements.locations[previousElements.locations.length - 1];
            connections.push(`Despu√©s de explorar ${lastLocation}`);
            connections.push(`Tras esa aventura en ${lastLocation}`);
            connections.push(`Recordando ese fascinante ${lastLocation}`);
        }
        
        if (previousElements.activities.length > 0) {
            const lastActivity = previousElements.activities[previousElements.activities.length - 1];
            connections.push(`Despu√©s de estar ${lastActivity}`);
            connections.push(`Como si ${lastActivity} no fuera suficiente`);
        }
        
        if (previousElements.emotions.includes('sarcasmo_positivo')) {
            connections.push('Si eso era "emocionante", esto es');
            connections.push('Como continuaci√≥n de esa "fascinante" experiencia');
        }
        
        // Conexiones generales siempre disponibles
        connections.push('Continuando con esta √©pica aventura');
        connections.push('Como secuela de lo anterior');
        connections.push('En el siguiente cap√≠tulo de esta saga');
        
        return connections;
    }

    // Guardar historial en archivo JSON
    saveHistoryToFile() {
        try {
            const historyData = {
                metadata: {
                    version: "1.0",
                    lastUpdated: new Date().toISOString(),
                    totalConversations: this.conversationHistory.length
                },
                conversations: this.conversationHistory,
                lastAnalysis: this.lastAnalysis,
                statistics: {
                    totalComments: this.conversationHistory.length,
                    firstComment: this.conversationHistory[0]?.timestamp || null,
                    lastComment: this.conversationHistory[this.conversationHistory.length - 1]?.timestamp || null
                }
            };

            fs.writeFileSync(this.historyFile, JSON.stringify(historyData, null, 2), 'utf8');
            console.log(`üíæ Historial guardado: ${this.conversationHistory.length} comentarios`);
        } catch (error) {
            console.error('‚ùå Error guardando historial:', error.message);
        }
    }

    // Obtener estad√≠sticas del historial
    getHistoryStats() {
        try {
            if (fs.existsSync(this.historyFile)) {
                const data = fs.readFileSync(this.historyFile, 'utf8');
                const historyData = JSON.parse(data);
                return {
                    totalComments: historyData.conversations?.length || 0,
                    lastUpdated: historyData.metadata?.lastUpdated || null,
                    memoryComments: this.conversationHistory.length,
                    fileSize: fs.statSync(this.historyFile).size
                };
            }
        } catch (error) {
            console.error('‚ùå Error obteniendo estad√≠sticas:', error.message);
        }
        return { totalComments: 0, memoryComments: 0, fileSize: 0 };
    }

    // Exportar historial completo (para respaldos)
    exportFullHistory() {
        try {
            if (fs.existsSync(this.historyFile)) {
                const data = fs.readFileSync(this.historyFile, 'utf8');
                return JSON.parse(data);
            }
        } catch (error) {
            console.error('‚ùå Error exportando historial:', error.message);
        }
        return null;
    }

    // Extraer temas principales de los comentarios anteriores para evitar repeticiones
    extractTopics(historyItems) {
        const topics = new Set();
        
        historyItems.forEach(item => {
            const analysis = item.analysis.toLowerCase();
            
            // Extraer palabras clave comunes
            const keywords = [
                'herramientas', 'automatizar', 'streamers', 'youtube', 'algoritmo',
                'visualizaciones', 'clasificacion', 'video', 'clicks', 'impresiones',
                'logo', 'duracion', 'tiempo', 'porcentaje', 'datos', 'estadisticas',
                'pantalla', 'controles', 'opciones', 'configuracion', 'interfaz',
                'sistema', 'aplicacion', 'programa', 'software', 'navegador'
            ];
            
            keywords.forEach(keyword => {
                if (analysis.includes(keyword)) {
                    topics.add(keyword);
                }
            });
            
            // Extraer conceptos espec√≠ficos mencionados
            if (analysis.includes('sabias que')) topics.add('datos-curiosos');
            if (analysis.includes('has probado')) topics.add('sugerencias');
            if (analysis.includes('has considerado')) topics.add('recomendaciones');
            if (analysis.includes('te has fijado')) topics.add('observaciones');
            if (analysis.includes('que opinas')) topics.add('preguntas');
        });
        
        return Array.from(topics);
    }

    // Crear un hash simple de la imagen (usando longitud y primeros/√∫ltimos caracteres)
    createSimpleImageHash(base64Image) {
        const length = base64Image.length;
        const start = base64Image.substring(0, 100);
        const end = base64Image.substring(base64Image.length - 100);
        const middle = base64Image.substring(Math.floor(length / 2), Math.floor(length / 2) + 100);
        
        return `${length}_${start}_${middle}_${end}`;
    }

    // Verificar si la imagen actual es similar a las anteriores
    isImageSimilar(currentHash) {
        if (this.imageHistory.length === 0) return false;
        
        // Verificar si el hash es exactamente igual a alguno de los √∫ltimos 3
        const recentHashes = this.imageHistory.slice(-3);
        return recentHashes.some(pastHash => pastHash === currentHash);
    }

    // Actualizar el historial de im√°genes
    updateImageHistory(imageHash) {
        this.imageHistory.push(imageHash);
        this.lastImageHash = imageHash;
        
        // Mantener solo los √∫ltimos 5 hashes
        if (this.imageHistory.length > 5) {
            this.imageHistory = this.imageHistory.slice(-5);
        }
    }
}

export default VisionAnalyzer;
