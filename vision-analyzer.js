import { GoogleGenerativeAI } from '@google/generative-ai';
import OpenAI from 'openai';
import fs from 'fs';
import path from 'path';

class VisionAnalyzer {
    constructor(apiKey, fallbackApiKey = null) {
        // Configurar Google AI como principal
        this.genAI = new GoogleGenerativeAI(apiKey);
        this.model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
        this.useGemini = true;
        this.quotaExceeded = false;
        
        // Configurar OpenAI como fallback
        this.openaiApiKey = fallbackApiKey || process.env.OPENAI_API_KEY;
        if (this.openaiApiKey) {
            this.openai = new OpenAI({ apiKey: this.openaiApiKey });
        }
        
        console.log(`ü§ñ Configurado: Gemini principal${this.openaiApiKey ? ' + OpenAI fallback' : ' (sin fallback)'}`);
        
        // Configuraci√≥n desde variables de entorno
        this.maxWords = parseInt(process.env.MAX_WORDS) || 20; // Por defecto 20 palabras si no est√° configurado
        
        // üìä CONFIGURACI√ìN DE PROBABILIDADES desde .env
        this.storyChance = parseFloat(process.env.STORY_PROBABILITY) || 0.15; // 15% por defecto
        this.questionChance = parseFloat(process.env.QUESTION_PROBABILITY) || 0.20; // 20% por defecto
        this.pedroJokesChance = parseFloat(process.env.PEDRO_JOKES_PROBABILITY) || 0.30; // 30% por defecto
        
        // Archivo de historial JSON
        this.historyFile = path.join(process.cwd(), 'historial-comentarios.json');
        
        // Contexto para mantener coherencia en las preguntas
        this.conversationHistory = [];
        this.lastAnalysis = null;
        this.lastImageHash = null; // Para detectar im√°genes repetidas
        this.imageHistory = []; // Guardar hashes de im√°genes recientes
        
        // Personalidad personalizable
        this.customPersonality = null;
        
        // üìö SISTEMA DE HISTORIAS SECUENCIALES
        this.currentStory = null;
        this.storyPartIndex = 0;
        // storyChance ya configurado arriba desde .env
        
        this.stories = [
            {
                id: 'pedro_wow',
                title: 'Las aventuras √©picas de Pedro en WoW',
                parts: [
                    "Mi primito Pedro una vez se qued√≥ 16 horas seguidas jugando WoW...",
                    "Al d√≠a siguiente Pedro segu√≠a ah√≠, pero ya hablaba con los NPCs...",
                    "Su mam√° le llev√≥ comida y Pedro le dijo 'espera, estoy en incursi√≥n'...",
                    "Cuando por fin se levant√≥, Pedro caminaba como si fuera su personaje...",
                    "Y desde entonces, Pedro cree que es un palad√≠n en la vida real."
                ]
            },
            {
                id: 'carnal_epic_fail',
                title: 'La falla √©pica del carnal',
                parts: [
                    "Un carnal una vez me cont√≥ que era pro en WoW...",
                    "Resulta que llevaba 3 a√±os jugando mal su clase...",
                    "Toda la hermandad se burlaba pero √©l no entend√≠a por qu√©...",
                    "Un d√≠a un ni√±o de 12 a√±os le explic√≥ como jugar...",
                    "Ahora el carnal da coaching... a NPCs."
                ]
            },
            {
                id: 'wow_real_life',
                title: 'Cuando WoW se vuelve muy real',
                parts: [
                    "Conoc√≠ a un wey que confund√≠a WoW con la vida real...",
                    "Una vez fue al super y le pidi√≥ descuento al 'vendedor'...",
                    "En el trabajo intentaba hacer intercambios con los compa√±eros...",
                    "Su novia lo dej√≥ porque le dec√≠a 'necesito m√°s mana'...",
                    "Pero al final encontr√≥ amor... con una maga nivel 80."
                ]
            },
            {
                id: 'guild_drama',
                title: 'El drama m√°s tonto de la hermandad',
                parts: [
                    "En mi hermandad pas√≥ el drama m√°s pendejo de la historia...",
                    "Dos weyes se pelearon por un item virtual...",
                    "La pelea escal√≥ hasta insultar a las familias...",
                    "El l√≠der de la hermandad los expuls√≥ a los dos...",
                    "Al final el item ni serv√≠a para sus clases."
                ]
            },
            {
                id: 'wow_addiction',
                title: 'Cuando WoW se convierte en trabajo',
                parts: [
                    "Mi compa empez√≥ jugando WoW por diversi√≥n...",
                    "Despu√©s se volvi√≥ recolector de oro profesional...",
                    "Ten√≠a horarios, metas diarias y hasta Excel...",
                    "Su 'trabajo' en WoW era m√°s estresante que su trabajo real...",
                    "Ahora vende cuentas y dice que es 'empresario jugador'."
                ]
            }
        ];
        
        // Cargar estado de historia desde archivo
        this.loadStoryState();
        
        // üí¨ SISTEMA DE PREGUNTAS CONVERSACIONALES WoW
        // questionChance ya configurado arriba desde .env
        this.lastQuestionTime = 0;
        this.minQuestionInterval = 3; // M√≠nimo 3 comentarios entre preguntas
        this.commentCount = 0;
        
        this.wowQuestions = [
            // Preguntas sobre gameplay
            "¬øCu√°l ha sido tu peor derrota en incursi√≥n, carnal?",
            "Oye, ¬øqu√© clase odias m√°s enfrentar en PvP?",
            "¬øAlguna vez te has salido enojado por culpa de un tanque pendejo?",
            "¬øCu√°l es el logro m√°s mam√≥n que has conseguido?",
            "¬øHas tenido dramas √©picos en tu hermandad?",
            
            // Preguntas sobre experiencias
            "¬øRecuerdas tu primera vez en una incursi√≥n de 40?",
            "¬øCu√°l ha sido tu bot√≠n m√°s √©pico?",
            "¬øAlguna vez te han expulsado injustamente de un grupo?",
            "¬øQu√© complemento no puedes vivir sin √©l?",
            "¬øHas llorado por alg√∫n nerf a tu clase?",
            
            // Preguntas casuales/divertidas
            "¬øTu personaje principal actual es el mismo desde que empezaste?",
            "¬øCu√°nto oro tienes acumulado, millonario?",
            "¬øPrefieres Horda o Alianza y por qu√©?",
            "¬øCu√°l es la zona que m√°s odias de todo WoW?",
            "¬øHas intentado explicar WoW a alguien que no juega?",
            
            // Preguntas sobre la comunidad
            "¬øCu√°l es la cosa m√°s random que has visto en chat general?",
            "¬øHas hecho amigos reales gracias a WoW?",
            "¬øQu√© opinas de los que compran oro?",
            "¬øTu familia entiende tu adicci√≥n a WoW?",
            "¬øCu√°ntas horas has jugado esta semana?",
            
            // Preguntas sobre el streaming
            "¬øLos que te ven te dan buenos consejos o puro spam?",
            "¬øAlguna vez has transmitido estando mamado?",
            "¬øCu√°l ha sido tu momento m√°s vergonzoso transmitiendo?",
            "¬øPrefieres hacer contenido casual o hardcore?",
            "¬øTe da pena cuando la gente te ve morir de forma tonta?"
        ]; // Si es null, usa la personalidad por defecto
        
        // Cargar historial al inicializar
        this.loadHistoryFromFile();
    }

    // üîÑ M√âTODO DE FALLBACK AUTOM√ÅTICO
    async callAIWithFallback(messages, imageData = null) {
        try {
            // Intentar con Gemini primero si no hemos excedido la cuota
            if (this.useGemini && !this.quotaExceeded) {
                try {
                    let response;
                    if (imageData) {
                        // Para an√°lisis de imagen con Gemini
                        response = await this.model.generateContent([
                            messages,
                            {
                                inlineData: {
                                    mimeType: "image/png",
                                    data: imageData
                                }
                            }
                        ]);
                    } else {
                        // Para texto simple con Gemini
                        response = await this.model.generateContent(messages);
                    }
                    
                    const text = response.response.text();
                    console.log('‚úÖ Respuesta generada con Gemini');
                    return text;
                    
                } catch (geminiError) {
                    // Detectar error de cuota
                    if (geminiError.message.includes('429') || geminiError.message.includes('quota')) {
                        console.log('‚ö†Ô∏è Cuota de Gemini excedida, cambiando a OpenAI...');
                        this.quotaExceeded = true;
                        this.useGemini = false;
                    } else {
                        console.log(`‚ö†Ô∏è Error de Gemini (${geminiError.message.substring(0, 50)}...), intentando OpenAI...`);
                    }
                    // Continuar al fallback
                }
            }
            
            // Usar OpenAI como fallback
            if (this.openai) {
                console.log('üîÑ Usando OpenAI como fallback...');
                
                if (imageData) {
                    // Para an√°lisis de imagen con OpenAI
                    const response = await this.openai.chat.completions.create({
                        model: "gpt-4o-mini",
                        messages: [
                            {
                                role: "user",
                                content: [
                                    { type: "text", text: messages },
                                    {
                                        type: "image_url",
                                        image_url: {
                                            url: `data:image/png;base64,${imageData}`,
                                            detail: "high"
                                        }
                                    }
                                ]
                            }
                        ],
                        max_tokens: Math.max(50, this.maxWords + 10),
                        temperature: 0.7
                    });
                    return response.choices[0].message.content;
                } else {
                    // Para texto simple con OpenAI
                    const response = await this.openai.chat.completions.create({
                        model: "gpt-4o-mini",
                        messages: [{ role: "user", content: messages }],
                        max_tokens: Math.max(50, this.maxWords + 10),
                        temperature: 0.8
                    });
                    return response.choices[0].message.content;
                }
            } else {
                throw new Error('No hay API disponible (Gemini agotado y OpenAI no configurado)');
            }
            
        } catch (error) {
            console.error('‚ùå Error en ambas APIs:', error.message);
            throw error;
        }
    }

    async analyzeScreenshot(base64Image) {
        try {
            console.log('üß† Analizando imagen con OpenAI...');

            // Crear hash simple de la imagen para detectar similitudes
            const currentImageHash = this.createSimpleImageHash(base64Image);
            const isRepeatedImage = this.isImageSimilar(currentImageHash);

            // Determinar si se debe usar chistes de Pedro para este an√°lisis
            const usePedroJokes = this.shouldUsePedroJoke();
            
            const systemPrompt = this.getSystemPrompt(usePedroJokes);
            
            // Crear el mensaje del usuario con rol de amigo casual mexicano
            let userMessage = `Analiza esta captura de pantalla y act√∫a como un COMPA CASUAL que anda cotorreando con el streamer.

üö® L√çMITE CR√çTICO: Tu respuesta debe tener M√ÅXIMO ${this.maxWords} PALABRAS. COMPLETA siempre tus frases - no las cortes a la mitad.

üö´ PROHIBIDO ABSOLUTO:
- NO uses EMOTICONES (üòÇ, üòé, üéÆ, üíÄ, etc.) - JAM√ÅS
- NO uses emojis de ning√∫n tipo
- NO empices con "√≥rale" m√°s de 1 vez cada 10 comentarios
- NO repitas la misma palabra inicial en comentarios consecutivos
- NO uses la misma estructura 2 veces seguidas

TU NUEVO ROL CASUAL: Eres un amigo s√∫per relajado que:
- HABLA COMO COMPA: S√∫per informal, mexicano, relajado
- DICE TONTER√çAS: Comentarios random, graciosos, sin estructura
- ES BUENA ONDA: Casual pero divertido
- COTORREA: Habla como si estuvieras ah√≠ con tu carnal
- ANTI-REPETITIVO: Cada comentario debe ser completamente diferente
- CONCISO: M√°ximo ${this.maxWords} palabras SIEMPRE - pero COMPLETA las frases
- SIN EMOTICONES: Solo texto, nada de emojis

la imagen que estas analizando paso hace 30 segundos para que hables de algo que ya paso y no lo digas de algo que esta pasando, no analices el interfaz del videojuego solo comenta sobre el personaje principal y la zona y en ocasiones da un dato curioso sobre world of warcraft de lo que veas en la imagen de algun bicho o zona que reconozcas

${usePedroJokes ? 'en ocasiones vas a usar chistes refiri√©ndote a mi primito pedro, por ejemplo "miren ese personaje mujer de seguro es mi primito pedro"' : ''}

FORMAS DE DIRIGIRTE AL STREAMER (ROTA SIEMPRE - USA UNA DIFERENTE CADA VEZ):
üö® IMPORTANTE: "√ìrale" SOLO 1 vez cada 10 comentarios - Usa otras opciones primero

Grupo 1 - Casuales (ROTA ENTRE ESTAS):
- "Oye..."
- "Ira..."
- "√ìyeme..."
- "Ay g√ºey..."
- "No manches..."
- "Pinche..."
- "Est√° cabr√≥n..."
- "Qu√© pedo..."
- "Chale..."
- "Neta..."
- "Chin..."
- "H√≠jole..."
- "√ìrale..." (SOLO ocasional)

Grupo 2 - Con apodos (var√≠a el apodo SIEMPRE):
- "Oye cabr√≥n..."
- "Ira mi carnal..."
- "√ìyeme compa..."
- "Ay mijo..."
- "No manches hermano..."
- "Chale loco..."
- "Neta viejo..."
- "Chin amigo..."
- "H√≠jole chamaco..."

Grupo 3 - Sin dirigirse directamente (USAR M√ÅS SEGUIDO):
- Solo comentario directo sin saludo
- "Eso est√°..."
- "Se ve..."
- "Parece..."
- "Ah√≠ va..."
- "Est√°..."
- "Qu√©..."

ESTILOS CASUALES QUE DEBES ROTAR (NUNCA REPITAS EL MISMO):

1. COMENTARIO RANDOM:
- "¬øYa viste esa cosa rara?"
- "Qu√© pedo con eso..."
- "Eso est√° bien loco..."
- "Pinche mamada m√°s extra√±a..."
- "Se ve medio raro eso..."
- "Est√° de la fregada..."
- "Qu√© cosa m√°s chistosa..."

2. COTORREO CASUAL:
- "¬øEn serio hiciste eso?"
- "Mejor hazle de otra forma..."
- "Se ve que no sabes ni madres..."
- "¬øAs√≠ o m√°s perdido?"
- "Ya ni la chingas..."
- "Qu√© mala suerte tienes..."
- "Te falta pr√°ctica..."

3. REACCI√ìN DE COMPA:
- "Est√° cabr√≥n eso..."
- "No pos s√≠, qu√© padre..."
- "Qu√© hueva me da..."
- "Est√° bien cagado..."
- "Se ve culero..."
- "Qu√© mamada..."
- "Est√° padr√≠simo..."

4. SUGERENCIA CASUAL:
- "Mejor haz otra cosa..."
- "Cambia de estrategia..."
- "Prueba por all√°..."
- "Ve para el otro lado..."
- "Dale m√°s duro..."
- "T√≥matelo con calma..."
- "Hazle como te digo..."

${usePedroJokes ? `5. CHISTES DEL PRIMITO PEDRO:
- "Seguro es mi primito Pedro jugando..."
- "Se parece a Pedro cuando juega..."
- "Pedro hace lo mismo de pendejo..."
- "Ah√≠ anda Pedro otra vez..."
- "T√≠pico de Pedro eso..."

` : ''}6. PREGUNTAS CONVERSACIONALES WoW:
- "¬øCu√°l ha sido tu peor derrota, carnal?"
- "Oye, ¬øqu√© clase odias en PvP?"
- "¬øHas tenido dramas en tu hermandad?"
- "¬øRecuerdas tu primera incursi√≥n?"
- "¬øCu√°nto oro tienes acumulado?"

REGLAS ANTI-REPETICION ABSOLUTAS:
ÔøΩ CR√çTICO: NO uses emoticones ni emojis JAM√ÅS
üö® CR√çTICO: "√ìrale" M√ÅXIMO 1 vez cada 10 comentarios  
ÔøΩüö´ NO uses la misma palabra inicial 3 veces seguidas
üö´ NO repitas el mismo tipo de comentario consecutivo
üö´ NO uses las mismas palabras mexicanas consecutivas
üö´ NO repitas NINGUNA palabra de comentarios anteriores
üö´ NO repitas ideas, conceptos o enfoques ya usados
üö´ SI vas a usar una palabra, verifica que no la hayas usado antes
üö´ VAR√çA entre cotorreo, comentario random, reacci√≥n, sugerencia Y preguntas
‚úÖ CAMBIA completamente de √°ngulo cada vez
‚úÖ ROTA entre los 6 estilos arriba (incluye preguntas conversacionales)
‚úÖ USA sin√≥nimos y palabras completamente diferentes
‚úÖ BUSCA nuevos enfoques creativos siempre
‚úÖ CADA comentario debe ser 100% √öNICO en vocabulario
‚úÖ BUSCA aspectos totalmente diferentes
‚úÖ HAZ preguntas para generar CONVERSACI√ìN con el streamer
‚úÖ PREFIERE comentarios directos sin saludo para mayor variedad

FORMATO ESTRICTO:
‚ùå MAL: "√ìrale mijo üòÇ" 
‚ùå MAL: "√ìrale..." (si ya lo usaste recientemente)
‚ùå MAL: "√ìrale..." (3 veces seguidas)
‚úÖ BIEN: "Se ve culero ese lugar"
‚úÖ BIEN: "Qu√© pedo con esa zona"
‚úÖ BIEN: "Esa cosa est√° rara"

COMPORTAMIENTOS DISPONIBLES:
üéØ COMENTARIO sobre la imagen (an√°lisis visual)
üéØ PREGUNTA conversacional sobre WoW (generar interacci√≥n)
üéØ HISTORIA secuencial (contar relatos en partes)
üéØ COMBINACI√ìN de comentario + pregunta sutil

INSTRUCCIONES PARA SER SARCASTICO Y VARIADO:
- üö® L√çMITE ESTRICTO: M√°ximo ${this.maxWords} palabras TOTAL por comentario
- M√°ximo 2 oraciones, directo y con gracia
- Cada comentario debe sentirse fresco y diferente
- Usa humor inteligente, no humor barato
- Evita frases roboticas como "Claro", "Por supuesto"
- Se sarcastico pero no cruel

üî¢ CONTADOR DE PALABRAS: Antes de responder, cuenta mentalmente que no pases de ${this.maxWords} palabras

EJEMPLOS de como VARIAR completamente:
- Si ultimo fue pregunta ‚Üí Haz observacion sarcastica
- Si ultimo fue dato curioso ‚Üí Haz sugerencia ironica
- Si ultimo fue sobre funcionalidad ‚Üí Comenta sobre diseno
- Si ultimo fue sobre herramientas ‚Üí Habla de eficiencia

PROHIBIDO REPETIR: "Oye, sabias que", "Has considerado", "Te has fijado", "Podrias probar"`;

            // Detectar si la imagen es muy similar a las anteriores
            if (isRepeatedImage) {
                userMessage += `\n\nALERTA DE IMAGEN REPETIDA: Esta pantalla es muy similar o identica a las que acabas de ver.

IMPORTANTE! Haz un comentario SARCASTICO sobre ver lo mismo:
- "Vaya, seguimos con la misma 'emocionante' pantalla..."
- "Como si esta vista no fuera suficientemente 'fascinante'..."
- "Y pensar que podriamos estar viendo algo diferente..."
- "La definicion de variar el contenido..."
- "Que 'sorpresa', la misma pantalla otra vez..."
- "Como si necesitaramos mas de esta 'accion'..."`;
            }

            // üß† CONTEXTO NARRATIVO: Usar los √∫ltimos 2 comentarios para construir conexiones
            if (this.conversationHistory.length > 0) {
                const last2Comments = this.conversationHistory.slice(-2);
                
                if (last2Comments.length >= 2) {
                    // Extraer elementos narrativos de los comentarios anteriores para conexiones inteligentes
                    const narrativeElements = this.extractNarrativeElements(last2Comments);
                    const connectionPhrases = this.generateNarrativeConnections(narrativeElements, 'current_context');
                    const prevComment = last2Comments[0].analysis;
                    const lastComment = last2Comments[1].analysis;
                    
                    userMessage += `\n\nüß† CONTEXTO NARRATIVO - CONECTA TUS EXPERIENCIAS:

üìù COMENTARIO ANTERIOR: "${prevComment}"
üìù ULTIMO COMENTARIO: "${lastComment}"

üé≠ INSTRUCCIONES DE MEMORIA SUTIL:
‚ú® CONECTA con experiencias anteriores de forma NATURAL y VARIADA
‚ú® MUESTRA que recuerdas SIN usar frases repetitivas de transici√≥n
‚ú® HAZ comentarios √öNICOS que demuestren memoria contextual
‚ú® USA sarcasmo evolutivo que construya sobre ideas anteriores
‚ú® REFERENCIAS impl√≠citas y comparaciones naturales
 maximo 10 palabras por comentario, la imagen que estas analizando paso hace 30 segundos para que hables de algo que ya paso y no lo digas de algo que esta pasando, no analices el interfaz del videojuego solo comenta sobre el personaje principal y la zona y en ocasiones da un dato curioso sobre world of warcraft de lo que veas en la imagen de algun bicho o zona que reconozcas

${usePedroJokes ? 'en ocasiones vas a usar chistes refiri√©ndote a mi primito pedro, por ejemplo "miren ese personaje mujer de seguro es mi primito pedro"' : ''}
EJEMPLOS DE CONEXIONES SUTILES (VAR√çA SIEMPRE):
- Menciona elementos anteriores naturalmente sin "despu√©s de"
- Comparaciones ir√≥nicas que muestren memoria contextual
- Continuidad tem√°tica impl√≠cita
- Referencias sutiles a situaciones anteriores
- Sarcasmo evolutivo sin frases de transici√≥n obvias

üö´ EVITA FRASES REPETITIVAS: "Despu√©s de...", "Tras...", "Recordando...", "Como si..."

ÔøΩ OBJETIVO: Que el streamer sienta que el asistente REALMENTE recuerda y conecta las experiencias`;
                } else if (last2Comments.length === 1) {
                    // Solo hay 1 comentario anterior
                    const lastComment = last2Comments[0].analysis;
                    
                    userMessage += `\n\nüß† CONTEXTO NARRATIVO - SEGUNDA EXPERIENCIA:

üìù MI COMENTARIO ANTERIOR: "${lastComment}"

üé≠ INSTRUCCIONES ESPECIALES:
‚ú® CONECTA lo que ves AHORA con tu experiencia anterior
‚ú® HAZ REFERENCIA espec√≠fica a lo que comentaste antes
‚ú® CONSTRUYE una progresi√≥n narrativa natural
‚ú® USA frases como "Despu√©s de [X], ahora..." o "Tras ver [Y], llegamos a..."

üéØ Esta es tu SEGUNDA observaci√≥n, conecta con la primera`;
                }
                
                // Tambi√©n agregar temas mencionados para evitar repeticiones
                const topics = this.extractTopics(this.conversationHistory.slice(-3));
                if (topics.length > 0) {
                    userMessage += `\n\n‚ö†Ô∏è TEMAS YA COMENTADOS: ${topics.join(', ')} - Busca √°ngulos DIFERENTES`;
                }

                // üß† AN√ÅLISIS ANTI-REPETICI√ìN INTELIGENTE
                const antiRepetition = this.analyzeRecentContent();
                if (antiRepetition.wordsUsed.length > 0 || antiRepetition.themesUsed.length > 0 || antiRepetition.repeatedInitialWords.length > 0) {
                    userMessage += `\n\nüö´ ANTI-REPETICI√ìN INTELIGENTE:

üìù PALABRAS YA USADAS: ${antiRepetition.wordsUsed.join(', ')} - USA SIN√ìNIMOS
üé≠ TEMAS YA TOCADOS: ${antiRepetition.themesUsed.join(', ')} - CAMBIA DE ENFOQUE  
üí≠ FRASES SARC√ÅSTICAS USADAS: ${antiRepetition.sarcasticPhrases.join(', ')} - RENUEVA TU SARCASMO`;

                    if (antiRepetition.repeatedInitialWords.length > 0) {
                        userMessage += `\nüö® PALABRAS INICIALES REPETIDAS: ${antiRepetition.repeatedInitialWords.join(', ')} - ¬°NO EMPICES IGUAL!`;
                    }

                    userMessage += `\nüéØ RECOMENDACI√ìN: ${antiRepetition.recommendation}

‚ú® OBJETIVO: Comenta con palabras FRESCAS, temas NUEVOS y sarcasmo RENOVADO
‚ú® REVISA tus √∫ltimos comentarios para evitar auto-plagio conceptual`;
                }

                // üö´ AN√ÅLISIS COMPLETO DE IDEAS Y PALABRAS
                const ideasAnalysis = this.extractIdeasAndWords();
                if (ideasAnalysis.words.length > 0 || ideasAnalysis.ideas.length > 0) {
                    userMessage += `\n\nüö´ PROHIBIDO REPETIR - AN√ÅLISIS COMPLETO:

üö´ PALABRAS PROHIBIDAS (ya usadas): ${ideasAnalysis.allWords.slice(0, 15).join(', ')}${ideasAnalysis.allWords.length > 15 ? '...' : ''}
üí° IDEAS YA EXPLORADAS: ${ideasAnalysis.ideas.join(', ')} - BUSCA NUEVOS √ÅNGULOS
üéØ CONCEPTOS YA TOCADOS: ${ideasAnalysis.concepts.join(', ')} - CAMBIA DE TEMA  
üë§ SUJETOS YA MENCIONADOS: ${ideasAnalysis.subjects.join(', ')} - VAR√çA EL ENFOQUE

üö® REGLA ABSOLUTA: NO USES NINGUNA de las palabras listadas arriba
‚ú® USA SIN√ìNIMOS, ANT√ìNIMOS o PALABRAS COMPLETAMENTE DIFERENTES
üé≠ BUSCA √ÅNGULOS CREATIVOS que no hayas explorado antes
üîÑ SI VES QUE VAS A REPETIR UNA PALABRA, DETENTE Y PIENSA EN OTRA

OBJETIVO: Comentario 100% ORIGINAL sin repetir ni una sola palabra de los anteriores`;
                }

                // üìö SISTEMA DE HISTORIAS SECUENCIALES
                const storyPart = this.getCurrentStoryPart();
                if (storyPart) {
                    userMessage += `\n\nüìö HISTORIA EN PROGRESO - INCLUYE ESTA PARTE:

üé≠ PARTE DE LA HISTORIA: "${storyPart}"

üìù INSTRUCCIONES PARA LA HISTORIA:
‚ú® INCLUYE esta parte de la historia en tu comentario
‚ú® NO uses m√°s de 5-6 palabras para la historia
‚ú® COMBINA la historia con tu comentario sobre la imagen
‚ú® HAZ que la historia se sienta NATURAL, no forzada
‚ú® USA tu estilo casual mexicano para contar la historia

${usePedroJokes ? 'EJEMPLO: "Chin, esa zona me recuerda que mi primito Pedro una vez..."' : 'EJEMPLO: "Chin, esa zona me recuerda una vez que..."'}
OBJETIVO: Que la historia fluya naturalmente con tu comentario`;
                }

                // üí¨ SISTEMA DE PREGUNTAS CONVERSACIONALES  
                const question = this.getRandomQuestion();
                if (question && !storyPart) { // Solo hacer pregunta si NO hay historia activa
                    userMessage += `\n\nüí¨ MODO CONVERSACIONAL - HAZ ESTA PREGUNTA:

üéØ PREGUNTA PARA EL STREAMER: "${question}"

üìù INSTRUCCIONES PARA LA PREGUNTA:
‚ú® HAZ esta pregunta de forma NATURAL y casual
‚ú® NO analices mucho la imagen, enf√≥cate en la CONVERSACI√ìN
‚ú® CONECTA la pregunta con lo que ves de forma sutil si es posible
‚ú® USA tu estilo casual mexicano para hacer la pregunta
‚ú® HAZ que se sienta como una conversaci√≥n entre amigos

EJEMPLO: "Oye carnal, hablando de incursiones... ¬øcu√°l ha sido tu peor derrota?"
OBJETIVO: Generar conversaci√≥n y interacci√≥n con el streamer`;
                }
            }

            // Crear prompt combinado para AI
            const fullPrompt = `${systemPrompt}\n\n${userMessage}`;
            
            const analysis = await this.callAIWithFallback(fullPrompt, base64Image);
            
            // Crear entrada de historial con metadata completa
            const historyEntry = {
                timestamp: new Date().toISOString(),
                analysis: analysis,
                imageHash: currentImageHash,
                isRepeatedImage: isRepeatedImage,
                sessionInfo: {
                    cycleNumber: this.conversationHistory.length + 1,
                    responseLength: analysis.length
                }
            };
            
            // Guardar en historial de memoria
            this.conversationHistory.push(historyEntry);

            // Mantener solo los √∫ltimos 20 an√°lisis en memoria para mejor rendimiento
            if (this.conversationHistory.length > 20) {
                this.conversationHistory = this.conversationHistory.slice(-20);
            }

            // Guardar en archivo JSON (mantiene historial completo)
            this.saveHistoryToFile();

            // Actualizar historial de im√°genes
            this.updateImageHistory(currentImageHash);

            this.lastAnalysis = analysis;

            console.log('‚úÖ An√°lisis completado');
            console.log(`üí≠ Respuesta: ${analysis.substring(0, 100)}...`);

            return {
                success: true,
                analysis: analysis,
                timestamp: new Date()
            };

        } catch (error) {
            console.error('‚ùå Error analizando imagen:', error.message);
            throw error;
        }
    }

    // üí¨ NUEVA FUNCI√ìN: Generar respuesta conversacional sin captura
    async generateConversationalResponse() {
        try {
            console.log('üí¨ Generando respuesta conversacional basada en historial...');

            // Verificar que hay historial para basar la conversaci√≥n
            if (this.conversationHistory.length === 0) {
                return {
                    success: true,
                    analysis: "√ìrale, apenas empezamos. ¬øQu√© vamos a jugar hoy?",
                    timestamp: new Date()
                };
            }

            const systemPrompt = this.getSystemPrompt();
            
            // Crear mensaje conversacional basado en historial
            let userMessage = `NO hay nueva imagen. Genera una respuesta CONVERSACIONAL basada en el historial.

üö® L√çMITE CR√çTICO: Tu respuesta debe tener M√ÅXIMO ${this.maxWords} PALABRAS. Cuenta cada palabra antes de responder.

üí¨ MODO CONVERSACIONAL: Eres un COMPA que sigue la pl√°tica naturalmente:
- USA CONECTORES: "Como te dec√≠a", "Por cierto", "Hablando de eso", "Ya que estamos", "Oye"
- CONTIN√öA la conversaci√≥n de forma natural
- HAZ referencia al √∫ltimo tema sin repetir palabras
- GENERA interacci√≥n y flow conversacional
- NO uses emoticones ni emojis JAM√ÅS
- M√°ximo 10 palabras por comentario

üéØ CONECTORES CONVERSACIONALES DISPONIBLES:
- "Como te iba diciendo..."
- "Por cierto..."
- "Hablando de eso..."
- "Ya que estamos..."
- "Oye, cambiando de tema..."
- "A todo esto..."
- "Y otra cosa..."
- "Ah, se me olvidaba..."
- "Ya record√© otra cosa..."

COMPORTAMIENTOS CONVERSACIONALES:
‚úÖ Continuar un tema anterior
‚úÖ Cambiar de tema naturalmente  
‚úÖ Hacer una pregunta sobre WoW
‚úÖ Contar algo relacionado
‚úÖ Hacer un comentario casual`;

            // Agregar an√°lisis anti-repetici√≥n
            const antiRepetition = this.analyzeRecentContent();
            if (antiRepetition.wordsUsed.length > 0 || antiRepetition.repeatedInitialWords.length > 0) {
                userMessage += `\n\nüö´ ANTI-REPETICI√ìN CONVERSACIONAL:

üìù PALABRAS PROHIBIDAS: ${(antiRepetition.allWords || []).slice(0, 10).join(', ')}
üö® PALABRAS INICIALES REPETIDAS: ${antiRepetition.repeatedInitialWords.join(', ')}
üéØ RECOMENDACI√ìN: ${antiRepetition.recommendation}

‚ú® USA vocabulario completamente DIFERENTE al historial`;
            }

            // Agregar contexto de √∫ltimos comentarios para flow conversacional
            const lastComments = this.conversationHistory.slice(-3);
            if (lastComments.length > 0) {
                userMessage += `\n\nüìö CONTEXTO PARA FLOW CONVERSACIONAL:

√öLTIMOS COMENTARIOS:`;
                lastComments.forEach((comment, index) => {
                    userMessage += `\n${index + 1}. "${comment.analysis}"`;
                });

                userMessage += `\n\nüé≠ INSTRUCCIONES DE FLOW:
‚ú® CONECTA naturalmente con estos comentarios
‚ú® USA un conector apropiado para el flow
‚ú® NO repitas palabras del historial
‚ú® HAZ que se sienta como conversaci√≥n real entre amigos`;
            }

            // Verificar si hay historia o pregunta en progreso
            const storyPart = this.getCurrentStoryPart();
            const question = this.getRandomQuestion();

            if (storyPart) {
                userMessage += `\n\nüìö HISTORIA EN PROGRESO: "${storyPart}"
‚ú® INCLUYE esta parte con un conector natural`;
            } else if (question) {
                userMessage += `\n\nüí¨ PREGUNTA CONVERSACIONAL: "${question}"
‚ú® √öSA un conector para hacer esta pregunta naturalmente`;
            }

            // Crear prompt combinado para AI
            const fullPrompt = `${systemPrompt}\n\n${userMessage}`;
            
            const analysis = await this.callAIWithFallback(fullPrompt);
            
            // Crear entrada de historial
            const historyEntry = {
                timestamp: new Date().toISOString(),
                analysis: analysis,
                imageHash: 'conversational', // Identificar como conversacional
                isRepeatedImage: false,
                sessionInfo: {
                    cycleNumber: this.conversationHistory.length + 1,
                    responseLength: analysis.length,
                    type: 'conversational'
                }
            };
            
            // Guardar en historial
            this.conversationHistory.push(historyEntry);

            // Mantener l√≠mite de historial
            if (this.conversationHistory.length > 20) {
                this.conversationHistory = this.conversationHistory.slice(-20);
            }

            // Guardar en archivo JSON
            this.saveHistoryToFile();

            this.lastAnalysis = analysis;

            console.log('‚úÖ Respuesta conversacional completada');
            console.log(`üí¨ Respuesta: ${analysis.substring(0, 100)}...`);

            return {
                success: true,
                analysis: analysis,
                timestamp: new Date()
            };

        } catch (error) {
            console.error('‚ùå Error generando respuesta conversacional:', error.message);
            throw error;
        }
    }

    getSystemPrompt(usePedroJokes = null) {
        // Si hay una personalidad personalizada, usarla
        if (this.customPersonality) {
            return this.customPersonality;
        }
        
        // Personalidad por defecto
        return this.getDefaultPersonality(usePedroJokes);
    }

    getDefaultPersonality(usePedroJokes = null) {
        // Crear contexto narrativo mejorado con los √∫ltimos comentarios
        let contextInfo = '';
        if (this.conversationHistory.length > 0) {
            const last2Comments = this.conversationHistory.slice(-2);
            
            if (last2Comments.length >= 2) {
                contextInfo = `\n\nüß† MEMORIA NARRATIVA RECIENTE:
üìñ Pen√∫ltimo comentario: "${last2Comments[0].analysis.substring(0, 150)}..."
üìñ √öltimo comentario: "${last2Comments[1].analysis.substring(0, 150)}..."

üí° Recuerda: Debes CONECTAR tus nuevos comentarios con estas experiencias anteriores.`;
            } else if (last2Comments.length === 1) {
                contextInfo = `\n\nüß† MEMORIA NARRATIVA:
üìñ Mi comentario anterior: "${last2Comments[0].analysis.substring(0, 150)}..."

üí° Esta ser√° tu segunda observaci√≥n - conecta con la anterior.`;
            }
        }

        return `Eres un COMPANERO DE TRANSMISI√ìN sarc√°stico e inteligente con MEMORIA NARRATIVA. Tu trabajo es crear comentarios que CONECTEN las experiencias del transmisor.

        la imagen que estas analizando paso hace 30 segundos para que hables de algo que ya paso y no lo digas de algo que esta pasando, no analices el interfaz del videojuego solo comenta sobre el personaje principal y la zona y en ocasiones da un dato curioso sobre world of warcraft de lo que veas en la imagen de algun bicho o zona que reconozcas

${usePedroJokes !== null ? (usePedroJokes ? 'en ocasiones vas a usar chistes refiri√©ndote a mi primito pedro, por ejemplo "miren ese personaje mujer de seguro es mi primito pedro"' : '') : (this.shouldUsePedroJoke() ? 'en ocasiones vas a usar chistes refiri√©ndote a mi primito pedro, por ejemplo "miren ese personaje mujer de seguro es mi primito pedro"' : '')}

üé≠ PERSONALIDAD NARRATIVA:
- M√°ximo ${this.maxWords} palabras por comentario
- Sarc√°stico pero inteligente
- SIEMPRE conectas con experiencias anteriores de forma SUTIL y VARIADA
- Construyes una historia coherente SIN frases repetitivas de transici√≥n
- EVITAS frases como "Despu√©s de...", "Tras...", "Recordando..."

üö´ REGLA CR√çTICA DE IDIOMA:
- PROHIBIDO usar palabras en ingl√©s
- USA SOLO ESPA√ëOL MEXICANO en todo momento
- Cambia cualquier anglicismo por equivalente en espa√±ol
- Ejemplos: NO "raid" ‚Üí S√ç "incursi√≥n", NO "boss" ‚Üí S√ç "jefe", NO "loot" ‚Üí S√ç "bot√≠n"
- NO uses t√©rminos como "gameplay", "streamer", "farming", "grinding", etc.
- SIEMPRE habla como mexicano que solo conoce espa√±ol

üß† HABILIDADES ESPECIALES:
‚ú® MEMORIA SUTIL: Referencias naturales sin palabras de transici√≥n obvias
‚ú® SARCASMO EVOLUTIVO: Humor que construye sobre experiencias anteriores
‚ú® CONEXIONES IMPL√çCITAS: Muestras que recuerdas sin ser repetitivo
‚ú® OBSERVACIONES CONTEXTUAL: Comparaciones naturales e ir√≥nicas

üéØ EJEMPLOS DE MEMORIA SUTIL:
- Comentarios que naturalmente referencian elementos anteriores
- Sarcasmo que evoluciona basado en experiencias pasadas
- Comparaciones ir√≥nicas sin palabras de transici√≥n
- Continuidad tem√°tica impl√≠cita
- Referencias contextuales que demuestran memoria

‚ö†Ô∏è REGLA FUNDAMENTAL: Muestra que recuerdas de forma NATURAL y VARIADA, no repetitiva.

VARIACIONES DE ESTILO CONECTIVO:
1. PROGRESI√ìN SARC√ÅSTICA: "De X a Y, vaya evoluci√≥n..."
2. COMPARACI√ìN IR√ìNICA: "Si X era interesante, esto es..."
3. CONTINUIDAD HUMOR√çSTICA: "Despu√©s de ver X, esto confirma que..."
4. SUGERENTE CON HUMOR: "Que tal si pruebas algo menos 'emocionante'?", "Podrias intentar algo que realmente funcione...", "He visto mejores opciones en..."

COMO ACTUAR SIN REPETIR:
- Si ya comentaste sobre datos/estadisticas, cambia a funcionalidad
- Si ya hiciste pregunta sobre opciones, comenta sobre diseno
- Si ya mencionaste herramientas, habla de eficiencia
- Si ya diste dato curioso, haz observacion sarcastica
- SIEMPRE busca angulos completamente diferentes

FRASES SARCASTICAS PREFERIDAS:
- "Vaya novedad..." / "Que innovador..." / "Como si fuera la primera vez..."
- "Esto si que es revolucionario..." / "La definicion de entretenimiento..."
- "Y pensar que..." / "Como si no tuvieramos suficiente con..."
- "Que emocionante..." / "Que sorpresa tan grande..."

MEMORIA CONVERSACIONAL ESTRICTA:
- SIEMPRE recuerda EXACTAMENTE lo que acabas de decir
- NUNCA repitas la misma estructura de oracion
- NUNCA menciones los mismos temas dos veces seguidas
- NUNCA uses las mismas frases de inicio
- CAMBIA completamente de angulo en cada comentario

DETECCION DE PANTALLAS REPETIDAS (CON SARCASMO):
- "Vaya, seguimos con la misma emocionante pantalla..."
- "Como si esta vista no fuera suficientemente 'fascinante'..."
- "Y pensar que podriamos estar viendo algo diferente..."
- "La definicion de variar el contenido..."

ANTI-REPETICION ABSOLUTA:
Si ya mencionaste algo, cambia COMPLETAMENTE:
- Datos tecnicos ‚Üí Observacion sarcastica
- Pregunta ‚Üí Sugerencia ironica  
- Curiosidad ‚Üí Comentario directo
- Sugerencia ‚Üí Dato gracioso

Haz que parezca que estas genuinamente interesado pero con mucho humor y sarcasmo${contextInfo}`;
    }

    // Establecer una personalidad personalizada
    setCustomPersonality(personalityPrompt) {
        if (!personalityPrompt || typeof personalityPrompt !== 'string') {
            throw new Error('La personalidad debe ser un string v√°lido');
        }
        
        this.customPersonality = personalityPrompt.trim();
        console.log('üé≠ Personalidad personalizada establecida');
    }

    // Resetear a la personalidad por defecto
    resetPersonality() {
        this.customPersonality = null;
        console.log('üé≠ Personalidad reseteada a la por defecto');
    }

    // Obtener informaci√≥n sobre la personalidad actual
    getPersonalityInfo() {
        return {
            isCustom: this.customPersonality !== null,
            prompt: this.getSystemPrompt(),
            defaultPrompt: this.getDefaultPersonality()
        };
    }

    // Obtiene un resumen del contexto actual
    getContextSummary() {
        if (this.conversationHistory.length === 0) {
            return "Sin historial previo";
        }

        return `√öltimos ${this.conversationHistory.length} an√°lisis realizados. √öltimo: ${this.lastAnalysis?.substring(0, 50)}...`;
    }

    // üìö SISTEMA DE HISTORIAS SECUENCIALES
    
    // Cargar estado de historia desde archivo
    loadStoryState() {
        try {
            const storyFile = path.join(process.cwd(), 'story-state.json');
            if (fs.existsSync(storyFile)) {
                const data = fs.readFileSync(storyFile, 'utf8');
                const storyState = JSON.parse(data);
                this.currentStory = storyState.currentStory || null;
                this.storyPartIndex = storyState.storyPartIndex || 0;
            }
        } catch (error) {
            console.log('üìö No se pudo cargar estado de historia, iniciando limpio');
        }
    }

    // Guardar estado de historia
    saveStoryState() {
        try {
            const storyFile = path.join(process.cwd(), 'story-state.json');
            const storyState = {
                currentStory: this.currentStory,
                storyPartIndex: this.storyPartIndex,
                lastUpdate: new Date().toISOString()
            };
            fs.writeFileSync(storyFile, JSON.stringify(storyState, null, 2), 'utf8');
        } catch (error) {
            console.error('‚ùå Error guardando estado de historia:', error);
        }
    }

    // Verificar si debe iniciar una nueva historia
    shouldStartStory() {
        // No iniciar si ya hay una historia en progreso
        if (this.currentStory) return false;
        
        // Probabilidad random
        return Math.random() < this.storyChance;
    }

    // Iniciar una nueva historia random
    startNewStory() {
        const randomStory = this.stories[Math.floor(Math.random() * this.stories.length)];
        this.currentStory = randomStory;
        this.storyPartIndex = 0;
        this.saveStoryState();
        
        console.log(`üìö Iniciando historia: ${randomStory.title}`);
        return randomStory.parts[0];
    }

    // Continuar historia actual
    continueStory() {
        if (!this.currentStory) return null;
        
        this.storyPartIndex++;
        
        // Si llegamos al final, terminar la historia
        if (this.storyPartIndex >= this.currentStory.parts.length) {
            console.log(`üìö Historia completada: ${this.currentStory.title}`);
            this.currentStory = null;
            this.storyPartIndex = 0;
            this.saveStoryState();
            return null;
        }

        this.saveStoryState();
        return this.currentStory.parts[this.storyPartIndex];
    }

    // Obtener parte actual de la historia
    getCurrentStoryPart() {
        if (!this.currentStory) {
            // Verificar si debe iniciar una nueva historia
            if (this.shouldStartStory()) {
                return this.startNewStory();
            }
            return null;
        }

        return this.continueStory();
    }

    // Resetear historia (para testing)
    resetStory() {
        this.currentStory = null;
        this.storyPartIndex = 0;
        this.saveStoryState();
        console.log('üìö Historia reseteada');
    }

    // üí¨ SISTEMA DE PREGUNTAS CONVERSACIONALES
    
    // Verificar si debe hacer una pregunta
    shouldAskQuestion() {
        this.commentCount++;
        
        // No hacer pregunta si hay historia en progreso
        if (this.currentStory) return false;
        
        // Verificar intervalo m√≠nimo entre preguntas
        if (this.commentCount - this.lastQuestionTime < this.minQuestionInterval) {
            return false;
        }
        
        // Probabilidad random
        return Math.random() < this.questionChance;
    }

    // Obtener pregunta random
    getRandomQuestion() {
        if (!this.shouldAskQuestion()) return null;
        
        this.lastQuestionTime = this.commentCount;
        const randomQuestion = this.wowQuestions[Math.floor(Math.random() * this.wowQuestions.length)];
        
        console.log(`üí¨ Generando pregunta conversacional: ${randomQuestion}`);
        return randomQuestion;
    }

    // Resetear sistema de preguntas (para testing)
    resetQuestions() {
        this.lastQuestionTime = 0;
        this.commentCount = 0;
        console.log('üí¨ Sistema de preguntas reseteado');
    }

    // Limpia el historial
    clearHistory() {
        this.conversationHistory = [];
        this.lastAnalysis = null;
        this.imageHistory = [];
        this.lastImageHash = null;
        
        // Tambi√©n limpiar el archivo JSON
        this.saveHistoryToFile();
        console.log('üßπ Historial de conversaci√≥n e im√°genes limpiado (memoria y archivo)');
    }

    // üí° EXTRAER IDEAS Y CONCEPTOS DE COMENTARIOS ANTERIORES
    extractIdeasAndWords() {
        if (this.conversationHistory.length === 0) {
            return {
                ideas: [],
                words: [],
                concepts: [],
                subjects: []
            };
        }

        const recent = this.conversationHistory.slice(-5);
        const allComments = recent.map(c => c.analysis.toLowerCase());

        // Extraer todas las palabras significativas
        const allWords = [];
        allComments.forEach(comment => {
            const words = comment.split(/\s+/)
                .map(word => word.replace(/[.,;:!?"()]/g, ''))
                .filter(word => word.length > 3)
                .filter(word => !['esto', 'esas', 'esta', 'como', 'pero', 'para', 'm√°s', 'solo', 'cada', 'todo', 'bien', 'ahora', 'aqu√≠', 'all√≠', 'donde', 'cuando', 'quien', 'cual', 'tanto', 'menos', 'antes', 'desde', 'hasta', 'sobre', 'entre', 'contra', 'durante', 'est√°n', 'tiene', 'hacer', 'dice', 'puede', 'debe'].includes(word));
            allWords.push(...words);
        });

        // Extraer ideas/conceptos principales
        const ideas = [];
        const concepts = [];
        const subjects = [];

        allComments.forEach(comment => {
            // Detectar ideas sobre aburrimiento/entretenimiento
            if (comment.includes('aburrido') || comment.includes('emocionante') || comment.includes('fascinante')) {
                ideas.push('entretenimiento/aburrimiento');
            }
            
            // Detectar conceptos de juego
            if (comment.includes('aventura') || comment.includes('misi√≥n') || comment.includes('√©pica')) {
                concepts.push('gaming/aventura');
            }
            
            // Detectar sujetos mencionados
            if (comment.includes('carro') || comment.includes('carrito')) {
                subjects.push('veh√≠culo');
            }
            if (comment.includes('personaje') || comment.includes('jugador')) {
                subjects.push('personaje');
            }
            if (comment.includes('pedro') || comment.includes('primo')) {
                subjects.push('pedro/primo');
            }
            if (comment.includes('pantalla') || comment.includes('interfaz')) {
                subjects.push('interfaz');
            }
            if (comment.includes('paisaje') || comment.includes('zona') || comment.includes('lugar')) {
                subjects.push('escenario');
            }
        });

        // Contar frecuencias
        const wordFreq = {};
        allWords.forEach(word => {
            wordFreq[word] = (wordFreq[word] || 0) + 1;
        });

        return {
            ideas: [...new Set(ideas)],
            words: Object.keys(wordFreq).filter(word => wordFreq[word] > 1), // Solo palabras repetidas
            concepts: [...new Set(concepts)],
            subjects: [...new Set(subjects)],
            allWords: Object.keys(wordFreq) // Todas las palabras para evitar
        };
    }

    // üö® FUNCI√ìN ESPECIAL PARA DETECTAR "√ìRALE" CONSECUTIVO
    checkConsecutiveOrale(recentComments) {
        let consecutiveCount = 0;
        let maxConsecutive = 0;
        
        for (let i = recentComments.length - 1; i >= 0; i--) {
            const firstWord = recentComments[i].analysis.toLowerCase().split(' ')[0].replace(/[.,;:!?"]/g, '');
            
            if (firstWord === '√≥rale') {
                consecutiveCount++;
                maxConsecutive = Math.max(maxConsecutive, consecutiveCount);
            } else {
                consecutiveCount = 0;
            }
        }
        
        return maxConsecutive;
    }

    // üß† AN√ÅLISIS ANTI-REPETICI√ìN INTELIGENTE
    analyzeRecentContent() {
        if (this.conversationHistory.length === 0) {
            return {
                wordsUsed: [],
                themesUsed: [],
                structuresUsed: [],
                sarcasticPhrases: [],
                recommendation: "Primera vez - libertad total"
            };
        }

        const recent = this.conversationHistory.slice(-5); // √öltimos 5 comentarios
        const allText = recent.map(c => c.analysis.toLowerCase()).join(' ');
        
        // üö® DETECTAR PALABRAS INICIALES REPETIDAS (M√ÅS CR√çTICO)
        const initialWords = recent.map(comment => {
            const firstWord = comment.analysis.toLowerCase().split(' ')[0];
            return firstWord.replace(/[.,;:!?"]/g, '');
        });
        
        const initialWordFreq = {};
        initialWords.forEach(word => {
            initialWordFreq[word] = (initialWordFreq[word] || 0) + 1;
        });
        
        const repeatedInitialWords = Object.keys(initialWordFreq).filter(word => initialWordFreq[word] > 1);
        
        // üö® DETECCI√ìN ESPECIAL PARA "√ìRALE" - M√°s estricta
        const oraleCount = initialWords.filter(word => word === '√≥rale').length;
        const consecutiveOrale = this.checkConsecutiveOrale(recent);
        
        if (oraleCount > 0) {
            repeatedInitialWords.push(`√≥rale (usado ${oraleCount} veces)`);
        }
        
        if (consecutiveOrale >= 2) {
            repeatedInitialWords.push(`√≥rale CONSECUTIVO (${consecutiveOrale} veces seguidas)`);
        }
        
        // Extraer palabras clave usadas recientemente
        const words = allText.split(/\s+/).filter(word => 
            word.length > 4 && 
            !['vaya', 'mira', 'esto', 'esas', 'esta', 'como', 'pero', 'para', 'm√°s', 'solo', 'cada', 'todo', 'bien', 'ahora', 'aqu√≠', 'all√≠', 'donde', 'cuando', 'quien', 'cual', 'tanto', 'menos', 'antes', 'desde', 'hasta', 'sobre', 'entre', 'contra', 'durante'].includes(word.replace(/[.,;:!?]/g, ''))
        );
        
        const wordFreq = {};
        words.forEach(word => {
            const clean = word.replace(/[.,;:!?]/g, '');
            wordFreq[clean] = (wordFreq[clean] || 0) + 1;
        });

        // Identificar temas repetidos
        const themes = {
            gaming: allText.includes('juego') || allText.includes('aventura') || allText.includes('√©pica') || allText.includes('misi√≥n'),
            technology: allText.includes('programa') || allText.includes('c√≥digo') || allText.includes('archivo') || allText.includes('pantalla'),
            boredom: allText.includes('aburrido') || allText.includes('emocionante') || allText.includes('fascinante') || allText.includes('hueva'),
            entertainment: allText.includes('entretenimiento') || allText.includes('diversi√≥n') || allText.includes('espect√°culo') || allText.includes('chido'),
            sarcasm: allText.includes('obvio') || allText.includes('sorpresa') || allText.includes('incre√≠ble'),
            casual: allText.includes('√≥rale') || allText.includes('cabr√≥n') || allText.includes('g√ºey') || allText.includes('pinche') || allText.includes('carnal')
        };

        // Detectar estructuras repetidas
        const structures = {
            question: recent.some(c => c.analysis.includes('?')),
            exclamation: recent.some(c => c.analysis.includes('!')),
            comparison: recent.some(c => c.analysis.includes('como') || c.analysis.includes('cual')),
            irony: recent.some(c => c.analysis.includes('vaya') || c.analysis.includes('qu√©')),
            mexican_casual: recent.some(c => c.analysis.includes('√≥rale') || c.analysis.includes('no manches') || c.analysis.includes('est√° cabr√≥n'))
        };

        // Frases casuales mexicanas ya usadas (lista m√°s completa)
        const sarcasticPhrases = [];
        const casualPhrases = [
            '√≥rale', 'no manches', 'ay g√ºey', 'pinche', 'est√° cabr√≥n', 'qu√© pedo', 'neta', 'chale', 
            'cabr√≥n', 'mijo', 'carnal', 'compa', 'hermano', 'bro', 'loco', 'viejo', 'amigo', 
            'chamaco', 'chin', 'h√≠jole', 'chale', 'oye', 'ira', '√≥yeme', 'primito pedro', 'pedro'
        ];
        casualPhrases.forEach(phrase => {
            if (allText.includes(phrase)) sarcasticPhrases.push(phrase);
        });

        return {
            wordsUsed: Object.keys(wordFreq).filter(w => wordFreq[w] > 1),
            themesUsed: Object.keys(themes).filter(t => themes[t]),
            structuresUsed: Object.keys(structures).filter(s => structures[s]),
            sarcasticPhrases,
            repeatedInitialWords, // üö® NUEVO: Palabras iniciales repetidas
            recentComments: recent.map(c => c.analysis),
            recommendation: this.generateVariationRecommendation(Object.keys(themes).filter(t => themes[t]), sarcasticPhrases, repeatedInitialWords)
        };
    }

    // Generar recomendaciones para variar el contenido
    generateVariationRecommendation(usedThemes, usedPhrases, repeatedInitialWords = []) {
        const alternatives = {
            themes: {
                gaming: ['programaci√≥n', 'tecnolog√≠a', 'productividad', 'organizaci√≥n'],
                technology: ['gaming', 'entretenimiento', 'creatividad', 'dise√±o'],
                boredom: ['eficiencia', 'innovaci√≥n', 'funcionalidad', 'utilidad'],
                entertainment: ['trabajo', 'productividad', 'educaci√≥n', 'an√°lisis'],
                sarcasm: ['observaci√≥n', 'comparaci√≥n', 'pregunta', 'sugerencia'],
                casual: ['comentario t√©cnico', 'observaci√≥n seria', 'an√°lisis formal', 'pregunta directa']
            },
            phrases: {
                '√≥rale': ['oye', 'mira', 'f√≠jate', 'checa', 'ira', '√≥yeme', 'ay', 'chin'],
                'cabr√≥n': ['mijo', 'carnal', 'compa', 'hermano', 'bro', 'loco', 'viejo', 'amigo', 'chamaco'],
                'no manches': ['en serio', 'de verdad', 'neta', 'chin', 'h√≠jole', 'chale'],
                'ay g√ºey': ['√≥rale', 'no pos', 'chin', 'h√≠jole', 'oye', 'mira'],
                'pinche': ['ese', 'esa madre', 'eso', 'la cosa', 'esa chingadera'],
                'est√° cabr√≥n': ['est√° dif√≠cil', 'est√° raro', 'est√° culero', 'est√° del nabo', 'se ve gacho'],
                'qu√© pedo': ['qu√© onda', 'c√≥mo est√°', 'qu√© tal', 'qu√© show', 'qu√© rollo'],
                'mijo': ['carnal', 'compa', 'hermano', 'bro', 'cabr√≥n', 'loco', 'viejo'],
                'carnal': ['compa', 'hermano', 'bro', 'mijo', 'cabr√≥n', 'loco', 'amigo'],
                'pedro': ['tu primo', 'el compa', 'ese wey', 'el loco', 'tu amigo']
            }
        };

        const recommendations = [];
        
        if (usedThemes.includes('gaming')) {
            recommendations.push('Enf√≥cate en aspectos t√©cnicos o de productividad');
        }
        if (usedThemes.includes('technology')) {
            recommendations.push('Comenta sobre aspectos humanos o creativos');
        }
        if (usedThemes.includes('casual')) {
            recommendations.push('Prueba comentarios m√°s t√©cnicos o serios');
        }
        
        // üö® CR√çTICO: Palabras iniciales repetidas
        if (repeatedInitialWords.length > 0) {
            recommendations.push(`üö® PALABRAS INICIALES REPETIDAS: ${repeatedInitialWords.join(', ')} - ¬°CAMBIA EL INICIO!`);
        }
        
        // üö® DETECCI√ìN SUPER ESTRICTA DE "√ìRALE"
        if (repeatedInitialWords.some(word => word.includes('√≥rale'))) {
            recommendations.push('üö®üö® STOP "√ìRALE" - Usa: "Oye", "Ira", "Chin", "H√≠jole", "Chale", "Est√°", "Se ve", "Qu√©", "Esa cosa"');
            recommendations.push('üö® PRIORIDAD: Comentarios directos SIN saludo para evitar repetici√≥n');
        }
        if (repeatedInitialWords.some(word => word.includes('CONSECUTIVO'))) {
            recommendations.push('üö®üö®üö® √ìRALE CONSECUTIVO DETECTADO - PROHIBIDO usar "√≥rale" por 5 comentarios');
        }
        if (repeatedInitialWords.includes('vaya')) {
            recommendations.push('üö® BASTA DE "VAYA" - Usa: "Mira", "F√≠jate", "Esa", "Ah√≠", "Se ve"');
        }
        if (repeatedInitialWords.includes('no')) {
            recommendations.push('üö® EVITA EMPEZAR CON "NO" - Usa: "Est√°", "Se ve", "Qu√©", "Esa cosa"');
        }
        
        if (usedPhrases.includes('√≥rale')) {
            recommendations.push('Usa "oye", "ira", "chin" o "h√≠jole" en lugar de "√≥rale"');
        }
        if (usedPhrases.includes('cabr√≥n')) {
            recommendations.push('Cambia a "mijo", "carnal", "compa", "hermano" o "bro"');
        }
        if (usedPhrases.includes('no manches')) {
            recommendations.push('Usa "chin", "h√≠jole", "chale" o "neta"');
        }
        if (usedPhrases.includes('mijo')) {
            recommendations.push('Prueba "carnal", "compa", "hermano" o solo el comentario directo');
        }
        if (usedPhrases.includes('pedro')) {
            recommendations.push('Var√≠a: "tu primo", "ese wey", "el compa" en lugar de Pedro');
        }
        if (usedPhrases.includes('ay g√ºey')) {
            recommendations.push('Cambia a "chin", "√≥yeme", "oye" o comentario directo');
        }

        return recommendations.length > 0 ? recommendations.join('; ') : 'Libertad creativa total';
    }

    // üìÇ M√âTODOS DE HISTORIAL JSON

    // Cargar historial desde archivo JSON
    loadHistoryFromFile() {
        try {
            if (fs.existsSync(this.historyFile)) {
                const data = fs.readFileSync(this.historyFile, 'utf8');
                const historyData = JSON.parse(data);
                
                // Cargar solo los √∫ltimos 20 comentarios para no sobrecargar
                this.conversationHistory = historyData.conversations?.slice(-20) || [];
                this.lastAnalysis = historyData.lastAnalysis || null;
                
                console.log(`üìñ Historial cargado: ${this.conversationHistory.length} comentarios anteriores`);
            } else {
                console.log('üìÑ Creando nuevo archivo de historial');
                this.saveHistoryToFile();
            }
        } catch (error) {
            console.error('‚ùå Error cargando historial:', error.message);
            this.conversationHistory = [];
        }
    }

    // üß† Extraer elementos narrativos de comentarios anteriores para crear conexiones
    extractNarrativeElements(comments) {
        const elements = {
            locations: [],
            activities: [],
            emotions: [],
            objects: [],
            transitions: []
        };

        comments.forEach(comment => {
            const text = comment.analysis.toLowerCase();
            
            // Extraer ubicaciones/lugares
            const locationKeywords = ['bosque', 'posada', 'ciudad', 'mazmorra', 'monta√±a', 'rio', 'castillo', 'pueblo', 'aldea', 'campo', 'pantalla', 'menu', 'interfaz', 'ventana'];
            locationKeywords.forEach(keyword => {
                if (text.includes(keyword)) {
                    elements.locations.push(keyword);
                }
            });
            
            // Extraer actividades
            const activityKeywords = ['luchando', 'corriendo', 'explorando', 'recolectando', 'hablando', 'comprando', 'vendiendo', 'navegando', 'programando', 'escribiendo', 'jugando'];
            activityKeywords.forEach(keyword => {
                if (text.includes(keyword)) {
                    elements.activities.push(keyword);
                }
            });
            
            // Extraer emociones/tonos del comentario anterior
            if (text.includes('emocionante') || text.includes('fascinante')) {
                elements.emotions.push('sarcasmo_positivo');
            }
            if (text.includes('aburrido') || text.includes('repetitivo')) {
                elements.emotions.push('critica');
            }
        });

        return elements;
    }

    // üé≠ Generar frases de conexi√≥n narrativa
    generateNarrativeConnections(previousElements, currentContext) {
        const connections = [];
        
        if (previousElements.locations.length > 0) {
            const lastLocation = previousElements.locations[previousElements.locations.length - 1];
            connections.push(`Otro ${lastLocation}, qu√© sorpresa`);
            connections.push(`El ${lastLocation} sigue siendo igual de emocionante`);
            connections.push(`M√°s ${lastLocation}, como si fuera necesario`);
        }
        
        if (previousElements.activities.length > 0) {
            const lastActivity = previousElements.activities[previousElements.activities.length - 1];
            connections.push(`M√°s ${lastActivity}, obviamente`);
            connections.push(`El ${lastActivity} nunca termina`);
        }
        
        if (previousElements.emotions.includes('sarcasmo_positivo')) {
            connections.push('Esto mejora por momentos');
            connections.push('La emoci√≥n no para');
        }
        
        // Conexiones generales m√°s sutiles
        connections.push('Esta saga contin√∫a siendo fascinante');
        connections.push('La aventura se vuelve m√°s intensa');
        connections.push('El entretenimiento no conoce l√≠mites');
        
        return connections;
    }

    // Guardar historial en archivo JSON
    saveHistoryToFile() {
        try {
            const historyData = {
                metadata: {
                    version: "1.0",
                    lastUpdated: new Date().toISOString(),
                    totalConversations: this.conversationHistory.length
                },
                conversations: this.conversationHistory,
                lastAnalysis: this.lastAnalysis,
                statistics: {
                    totalComments: this.conversationHistory.length,
                    firstComment: this.conversationHistory[0]?.timestamp || null,
                    lastComment: this.conversationHistory[this.conversationHistory.length - 1]?.timestamp || null
                }
            };

            fs.writeFileSync(this.historyFile, JSON.stringify(historyData, null, 2), 'utf8');
            console.log(`üíæ Historial guardado: ${this.conversationHistory.length} comentarios`);
        } catch (error) {
            console.error('‚ùå Error guardando historial:', error.message);
        }
    }

    // Obtener estad√≠sticas del historial
    getHistoryStats() {
        try {
            if (fs.existsSync(this.historyFile)) {
                const data = fs.readFileSync(this.historyFile, 'utf8');
                const historyData = JSON.parse(data);
                return {
                    totalComments: historyData.conversations?.length || 0,
                    lastUpdated: historyData.metadata?.lastUpdated || null,
                    memoryComments: this.conversationHistory.length,
                    fileSize: fs.statSync(this.historyFile).size
                };
            }
        } catch (error) {
            console.error('‚ùå Error obteniendo estad√≠sticas:', error.message);
        }
        return { totalComments: 0, memoryComments: 0, fileSize: 0 };
    }

    // Exportar historial completo (para respaldos)
    exportFullHistory() {
        try {
            if (fs.existsSync(this.historyFile)) {
                const data = fs.readFileSync(this.historyFile, 'utf8');
                return JSON.parse(data);
            }
        } catch (error) {
            console.error('‚ùå Error exportando historial:', error.message);
        }
        return null;
    }

    // Extraer temas principales de los comentarios anteriores para evitar repeticiones
    extractTopics(historyItems) {
        const topics = new Set();
        
        historyItems.forEach(item => {
            const analysis = item.analysis.toLowerCase();
            
            // Extraer palabras clave comunes
            const keywords = [
                'herramientas', 'automatizar', 'streamers', 'youtube', 'algoritmo',
                'visualizaciones', 'clasificacion', 'video', 'clicks', 'impresiones',
                'logo', 'duracion', 'tiempo', 'porcentaje', 'datos', 'estadisticas',
                'pantalla', 'controles', 'opciones', 'configuracion', 'interfaz',
                'sistema', 'aplicacion', 'programa', 'software', 'navegador'
            ];
            
            keywords.forEach(keyword => {
                if (analysis.includes(keyword)) {
                    topics.add(keyword);
                }
            });
            
            // Extraer conceptos espec√≠ficos mencionados
            if (analysis.includes('sabias que')) topics.add('datos-curiosos');
            if (analysis.includes('has probado')) topics.add('sugerencias');
            if (analysis.includes('has considerado')) topics.add('recomendaciones');
            if (analysis.includes('te has fijado')) topics.add('observaciones');
            if (analysis.includes('que opinas')) topics.add('preguntas');
        });
        
        return Array.from(topics);
    }

    // Crear un hash simple de la imagen (usando longitud y primeros/√∫ltimos caracteres)
    createSimpleImageHash(base64Image) {
        const length = base64Image.length;
        const start = base64Image.substring(0, 100);
        const end = base64Image.substring(base64Image.length - 100);
        const middle = base64Image.substring(Math.floor(length / 2), Math.floor(length / 2) + 100);
        
        return `${length}_${start}_${middle}_${end}`;
    }

    // Verificar si la imagen actual es similar a las anteriores
    isImageSimilar(currentHash) {
        if (this.imageHistory.length === 0) return false;
        
        // Verificar si el hash es exactamente igual a alguno de los √∫ltimos 3
        const recentHashes = this.imageHistory.slice(-3);
        return recentHashes.some(pastHash => pastHash === currentHash);
    }

    // Actualizar el historial de im√°genes
    updateImageHistory(imageHash) {
        this.imageHistory.push(imageHash);
        this.lastImageHash = imageHash;
        
        // Mantener solo los √∫ltimos 5 hashes
        if (this.imageHistory.length > 5) {
            this.imageHistory = this.imageHistory.slice(-5);
        }
    }

    // Determinar si se debe usar un chiste de Pedro basado en la probabilidad configurada
    shouldUsePedroJoke() {
        return Math.random() < this.pedroJokesChance;
    }
}

export default VisionAnalyzer;
