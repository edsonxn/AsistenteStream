// Test para verificar las conexiones narrativas del AsistenteStream
import fs from 'fs';

// Cargar el historial actual
const historyFile = './historial-comentarios.json';
const historyData = JSON.parse(fs.readFileSync(historyFile, 'utf8'));

console.log('üìö AN√ÅLISIS DEL HISTORIAL NARRATIVO');
console.log('=' .repeat(50));

console.log(`üìä Total de comentarios: ${historyData.conversations.length}`);
console.log('');

// Mostrar √∫ltimos 3 comentarios para ver conexiones
const last3 = historyData.conversations.slice(-3);

console.log('üîç √öLTIMOS 3 COMENTARIOS:');
console.log('-' .repeat(30));

last3.forEach((comment, index) => {
    const timestamp = new Date(comment.timestamp).toLocaleTimeString();
    console.log(`\n${index + 1}. [${timestamp}]`);
    console.log(`üìù "${comment.analysis}"`);
    console.log(`üìê ${comment.analysis.length} caracteres`);
});

console.log('\n' + '=' .repeat(50));
console.log('üîç AN√ÅLISIS DE CONEXIONES:');

// Buscar palabras de conexi√≥n temporal
const connectionWords = ['despu√©s', 'tras', 'recordando', 'continuando', 'como si', 'vaya', 'de'];
const recentComments = last3.map(c => c.analysis.toLowerCase());

recentComments.forEach((comment, index) => {
    console.log(`\n${index + 1}. PALABRAS DE CONEXI√ìN ENCONTRADAS:`);
    const found = connectionWords.filter(word => comment.includes(word));
    if (found.length > 0) {
        console.log(`   ‚úÖ ${found.join(', ')}`);
    } else {
        console.log(`   ‚ùå Ninguna palabra de conexi√≥n clara`);
    }
});

// Buscar referencias espec√≠ficas entre comentarios
console.log('\nüîó REFERENCIAS ENTRE COMENTARIOS:');
if (last3.length >= 2) {
    const penultimate = last3[last3.length - 2].analysis.toLowerCase();
    const ultimate = last3[last3.length - 1].analysis.toLowerCase();
    
    // Extraer palabras clave del pen√∫ltimo
    const keywords = penultimate.split(' ').filter(word => word.length > 5);
    const references = keywords.filter(word => ultimate.includes(word));
    
    if (references.length > 0) {
        console.log(`‚úÖ Referencias encontradas: ${references.join(', ')}`);
    } else {
        console.log(`‚ùå No se encontraron referencias claras entre los √∫ltimos 2 comentarios`);
    }
}

console.log('\nüìã EVALUACI√ìN DEL SISTEMA:');
const hasConnections = recentComments.some(comment => 
    connectionWords.some(word => comment.includes(word))
);

if (hasConnections) {
    console.log('‚úÖ El sistema est√° usando palabras de conexi√≥n');
} else {
    console.log('‚ö†Ô∏è El sistema necesita mejorar las conexiones narrativas');
}

console.log('\nüí° PR√ìXIMOS COMENTARIOS DEBER√çAN INCLUIR:');
console.log('- "Despu√©s de [X], ahora..."');
console.log('- "Tras ver [Y], llegamos a..."');
console.log('- "Recordando [Z], esto es..."');
console.log('- "Como continuaci√≥n de [W]..."');
